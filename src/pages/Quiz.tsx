import { useState, useEffect } from 'react';
import { collection, addDoc } from 'firebase/firestore';
import { db } from '../firebase';
import { quizQuestions } from '../data/quizQuestions';
import { generateAIQuiz } from '../utils/geminiService';
import type { QuizResult } from '../types';
import './Quiz.css';

const STANDARD_QUESTION_TIME = 30; // 30 gi√¢y cho c√¢u h·ªèi chu·∫©n
const AI_QUESTION_TIME = 60; // 60 gi√¢y cho c√¢u h·ªèi AI
const STANDARD_TOTAL_TIME = 300; // 5 ph√∫t cho quiz chu·∫©n
const AI_TOTAL_TIME = 420; // 7 ph√∫t cho AI quiz (5 c√¢u x 60s + buffer)

type QuizMode = 'standard' | 'ai';
type Difficulty = 'easy' | 'medium' | 'hard';

interface Question {
  id?: string;
  question: string;
  options: string[];
  correctAnswer?: number;
  correct?: number;
  explanation?: string;
}

const Quiz: React.FC = () => {
  const [quizMode, setQuizMode] = useState<QuizMode>('standard');
  const [difficulty, setDifficulty] = useState<Difficulty>('medium');
  const [isGenerating, setIsGenerating] = useState(false);
  const [currentQuestions, setCurrentQuestions] = useState<Question[]>([]);
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [selectedAnswers, setSelectedAnswers] = useState<number[]>([]);
  const [timeLeft, setTimeLeft] = useState(STANDARD_QUESTION_TIME);
  const [totalTimeLeft, setTotalTimeLeft] = useState(STANDARD_TOTAL_TIME);
  const [isQuizFinished, setIsQuizFinished] = useState(false);
  const [score, setScore] = useState(0);
  const [username, setUsername] = useState('');
  const [isStarted, setIsStarted] = useState(false);
  const [startTime, setStartTime] = useState(0);
  const [showResult, setShowResult] = useState(false);
  const [aiError, setAIError] = useState<string | null>(null);

  // Get question time limit based on quiz mode
  const getQuestionTimeLimit = () => {
    return quizMode === 'ai' ? AI_QUESTION_TIME : STANDARD_QUESTION_TIME;
  };

  // Get total quiz time based on quiz mode
  const getTotalQuizTime = () => {
    return quizMode === 'ai' ? AI_TOTAL_TIME : STANDARD_TOTAL_TIME;
  };

  // Timer cho c√¢u h·ªèi hi·ªán t·∫°i
  useEffect(() => {
    if (!isStarted || isQuizFinished) return;

    const timer = setInterval(() => {
      setTimeLeft((prev) => {
        if (prev <= 1) {
          handleNextQuestion();
          return getQuestionTimeLimit();
        }
        return prev - 1;
      });
    }, 1000);

    return () => clearInterval(timer);
  }, [currentQuestion, isStarted, isQuizFinished]);

  // Timer cho t·ªïng th·ªùi gian l√†m b√†i
  useEffect(() => {
    if (!isStarted || isQuizFinished) return;

    const timer = setInterval(() => {
      setTotalTimeLeft((prev) => {
        if (prev <= 1) {
          finishQuiz();
          return 0;
        }
        return prev - 1;
      });
    }, 1000);

    return () => clearInterval(timer);
  }, [isStarted, isQuizFinished]);

  // Initialize questions based on mode
  useEffect(() => {
    if (!isStarted) {
      if (quizMode === 'standard') {
        setCurrentQuestions(quizQuestions.map(q => ({
          ...q,
          correctAnswer: q.correctAnswer
        })));
      } else if (quizMode === 'ai') {
        // Ch·ªâ reset n·∫øu ch∆∞a c√≥ c√¢u h·ªèi AI
        setCurrentQuestions([]);
      }
      setTimeLeft(getQuestionTimeLimit());
      setTotalTimeLeft(getTotalQuizTime());
    }
  }, [quizMode, isStarted]);

  const generateAIQuizData = async () => {
    try {
      setAIError(null);
      console.log('Generating AI quiz with difficulty:', difficulty); // Debug log
      const data = await generateAIQuiz(difficulty);
      console.log('AI quiz data received:', data); // Debug log
      // Ki·ªÉm tra d·ªØ li·ªáu h·ª£p l·ªá
      if (!data || !Array.isArray(data.questions) || data.questions.length === 0) {
        setAIError('Kh√¥ng nh·∫≠n ƒë∆∞·ª£c c√¢u h·ªèi AI h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i.');
        setCurrentQuestions([]);
        return null;
      }
      // Ki·ªÉm tra t·ª´ng c√¢u h·ªèi
      const aiQuestions = data.questions
        .filter(q => q && q.question && Array.isArray(q.options) && q.options.length === 4 && typeof q.correct === 'number')
        .map(q => ({
          question: q.question,
          options: q.options,
          correctAnswer: q.correct,
          explanation: q.explanation
        }));
      if (aiQuestions.length === 0) {
        setAIError('Kh√¥ng c√≥ c√¢u h·ªèi AI h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i.');
        setCurrentQuestions([]);
        return null;
      }
      setCurrentQuestions(aiQuestions);
      console.log('Generated AI questions:', aiQuestions); // Debug log
      return aiQuestions; // Return the questions instead of just true
    } catch (error) {
      console.error('Error generating AI quiz:', error);
      setAIError('C√≥ l·ªói x·∫£y ra khi t·∫°o c√¢u h·ªèi AI. Vui l√≤ng th·ª≠ l·∫°i.');
      setCurrentQuestions([]); // Reset questions on error
      return null;
    } finally {
      setIsGenerating(false);
    }
  };

  const startQuiz = async () => {
    if (username.trim() === '') {
      alert('Vui l√≤ng nh·∫≠p t√™n c·ªßa b·∫°n ƒë·ªÉ b·∫Øt ƒë·∫ßu!');
      return;
    }

    let questionsToUse = currentQuestions;

    if (quizMode === 'ai') {
      setIsGenerating(true); // Set loading state
      const aiQuestions = await generateAIQuizData();
      if (!aiQuestions || aiQuestions.length === 0) {
        return; // Error occurred in generation
      }
      questionsToUse = aiQuestions; // Use the returned questions directly
    }

    // Set initial time based on quiz mode
    setTimeLeft(getQuestionTimeLimit());
    setTotalTimeLeft(getTotalQuizTime());
    setIsStarted(true);
    setStartTime(Date.now());
    console.log('Quiz started with questions:', questionsToUse.length);
  };

  const handleAnswerSelect = (answerIndex: number) => {
    const newAnswers = [...selectedAnswers];
    newAnswers[currentQuestion] = answerIndex;
    setSelectedAnswers(newAnswers);
  };

  const handleNextQuestion = () => {
    if (currentQuestion < currentQuestions.length - 1) {
      setCurrentQuestion(prev => prev + 1);
      setTimeLeft(getQuestionTimeLimit());
    } else {
      finishQuiz();
    }
  };

  const finishQuiz = async () => {
    setIsQuizFinished(true);
    
    // T√≠nh ƒëi·ªÉm
    let correctAnswers = 0;
    selectedAnswers.forEach((answer, index) => {
      if (answer === currentQuestions[index]?.correctAnswer) {
        correctAnswers++;
      }
    });
    
    const finalScore = correctAnswers;
    setScore(finalScore);
    
    // T√≠nh th·ªùi gian th·ª±c t·∫ø l√†m b√†i
    const actualTimeTaken = Math.round((Date.now() - startTime) / 1000);
    
    // L∆∞u k·∫øt qu·∫£ v√†o Firestore
    try {
      const quizResult: Omit<QuizResult, 'id'> = {
        username: username.trim(),
        score: finalScore,
        totalQuestions: currentQuestions.length,
        timeTaken: actualTimeTaken,
        quizDuration: getTotalQuizTime(),
        timestamp: new Date(),
        quizType: quizMode === 'ai' ? `ai-${difficulty}` : 'standard',
        difficulty: quizMode === 'ai' ? difficulty : undefined
      };
      
      // L∆∞u v√†o collection ph√π h·ª£p
      const collectionName = quizMode === 'ai' ? 'aiQuizResults' : 'quizResults';
      await addDoc(collection(db, collectionName), quizResult);
      setShowResult(true);
    } catch (error) {
      console.error('L·ªói khi l∆∞u k·∫øt qu·∫£:', error);
      alert('C√≥ l·ªói x·∫£y ra khi l∆∞u k·∫øt qu·∫£. Vui l√≤ng th·ª≠ l·∫°i sau.');
      setShowResult(true);
    }
  };

  const resetQuiz = () => {
    setCurrentQuestion(0);
    setSelectedAnswers([]);
    setTimeLeft(getQuestionTimeLimit());
    setTotalTimeLeft(getTotalQuizTime());
    setIsQuizFinished(false);
    setIsStarted(false);
    setScore(0);
    setUsername('');
    setShowResult(false);
    setStartTime(0);
    setQuizMode('standard');
    setDifficulty('medium');
    setCurrentQuestions([]);
    setIsGenerating(false);
  };

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  // M√†n h√¨nh loading khi t·∫°o AI quiz
  if (isGenerating) {
    return (
      <div className="quiz-container">
        <div className="quiz-card">
          <div className="loading-animation">
            <h1>ü§ñ ƒêang t·∫°o c√¢u h·ªèi AI</h1>
            <p className="quiz-description">
              Vui l√≤ng ƒë·ª£i trong gi√¢y l√°t, AI ƒëang t·∫°o {5} c√¢u h·ªèi v·ªÅ t∆∞ t∆∞·ªüng H·ªì Ch√≠ Minh v·ªõi m·ª©c ƒë·ªô {difficulty === 'easy' ? 'D·ªÖ' : difficulty === 'medium' ? 'Trung b√¨nh' : 'Kh√≥'}...
            </p>
            <div className="spinner"></div>
            <p>ƒêang x·ª≠ l√Ω...</p>
          </div>
        </div>
      </div>
    );
  }

  // M√†n h√¨nh b·∫Øt ƒë·∫ßu
  if (!isStarted) {
    const questionCount = quizMode === 'ai' ? (currentQuestions.length || 5) : quizQuestions.length;
    
    return (
      <div className="quiz-container">
        <div className="quiz-card quiz-start">
          <h1>Ki·ªÉm Tra Ki·∫øn Th·ª©c</h1>
          <p className="quiz-description">
            {quizMode === 'ai' 
              ? `Th·ª≠ th√°ch b·∫£n th√¢n v·ªõi ${questionCount} c√¢u h·ªèi ƒë∆∞·ª£c t·∫°o b·ªüi AI v·ªÅ t∆∞ t∆∞·ªüng H·ªì Ch√≠ Minh.`
              : `B√†i ki·ªÉm tra g·ªìm ${questionCount} c√¢u h·ªèi tr·∫Øc nghi·ªám v·ªÅ t∆∞ t∆∞·ªüng H·ªì Ch√≠ Minh.`}
          </p>
          
          {/* Quiz Mode Selection */}
          <div className="quiz-mode-selection">
            <h3>Ch·∫ø ƒë·ªô ki·ªÉm tra</h3>
            <div className="mode-options">
              <label className="mode-option">
                <input
                  type="radio"
                  name="quizMode"
                  value="standard"
                  checked={quizMode === 'standard'}
                  onChange={() => setQuizMode('standard')}
                />
                <span>üìö C√¢u h·ªèi chu·∫©n</span>
              </label>
              <label className="mode-option">
                <input
                  type="radio"
                  name="quizMode"
                  value="ai"
                  checked={quizMode === 'ai'}
                  onChange={() => setQuizMode('ai')}
                />
                <span>ü§ñ Th√°ch th·ª©c AI</span>
              </label>
            </div>
          </div>

          {/* Difficulty Selection for AI mode */}
          {quizMode === 'ai' && (
            <div className="difficulty-selection">
              <h3>ƒê·ªô kh√≥</h3>
              <div className="difficulty-options">
                <label className="difficulty-option">
                  <input
                    type="radio"
                    name="difficulty"
                    value="easy"
                    checked={difficulty === 'easy'}
                    onChange={() => setDifficulty('easy')}
                  />
                  <span>üü¢ D·ªÖ</span>
                </label>
                <label className="difficulty-option">
                  <input
                    type="radio"
                    name="difficulty"
                    value="medium"
                    checked={difficulty === 'medium'}
                    onChange={() => setDifficulty('medium')}
                  />
                  <span>üü° Trung b√¨nh</span>
                </label>
                <label className="difficulty-option">
                  <input
                    type="radio"
                    name="difficulty"
                    value="hard"
                    checked={difficulty === 'hard'}
                    onChange={() => setDifficulty('hard')}
                  />
                  <span>üî¥ Kh√≥</span>
                </label>
              </div>
            </div>
          )}
          
          <div className="username-input">
            <input
              type="text"
              placeholder="Nh·∫≠p t√™n c·ªßa b·∫°n ƒë·ªÉ b·∫Øt ƒë·∫ßu"
              value={username}
              onChange={(e) => setUsername(e.target.value)}
              maxLength={50}
            />
          </div>
          <button 
            className="start-button" 
            onClick={startQuiz}
            disabled={username.trim() === '' || isGenerating}
          >
            {isGenerating ? 'ü§ñ ƒêang t·∫°o...' : 'B·∫Øt ƒê·∫ßu'}
          </button>
        </div>
      </div>
    );
  }

  // M√†n h√¨nh k·∫øt qu·∫£
  if (isQuizFinished && showResult) {
    const percentage = currentQuestions.length > 0 ? Math.round((score / currentQuestions.length) * 100) : 0;
    const strokeDashoffset = 283 - (283 * percentage) / 100; // 283 is the circumference of the circle
    
    return (
      <div className="quiz-container">
        <div className="quiz-card quiz-result">
          <h1>K·∫øt Qu·∫£ Ki·ªÉm Tra</h1>
          <div className="result-summary">
            <h2>Ch√∫c m·ª´ng {username}!</h2>
            <div className="score-display">
              <svg className="score-circle" width="150" height="150" viewBox="0 0 150 150">
                <circle className="score-circle-bg" cx="75" cy="75" r="65"></circle>
                <circle 
                  className="score-circle-fg" 
                  cx="75" 
                  cy="75" 
                  r="65" 
                  strokeDasharray="408" 
                  strokeDashoffset={408 - (408 * percentage) / 100}
                ></circle>
              </svg>
              <div className="score-text">
                <span className="score-number">{score}</span>
                <span className="score-total">/{currentQuestions.length}</span>
              </div>
            </div>
            <p className="result-message">
              {percentage >= 80 ? 'Xu·∫•t s·∫Øc! B·∫°n ƒë√£ n·∫Øm v·ªØng ki·∫øn th·ª©c!' :
               percentage >= 60 ? 'T·ªët! B·∫°n ƒë√£ hi·ªÉu kh√° t·ªët b√†i h·ªçc.' :
               percentage >= 40 ? 'Kh√°! B·∫°n c·∫ßn √¥n t·∫≠p th√™m m·ªôt ch√∫t.' :
               'H√£y √¥n t·∫≠p l·∫°i b√†i h·ªçc v√† th·ª≠ l·∫ßn n·ªØa nh√©!'}
            </p>
          </div>
          
          <div className="answer-review">
            <h3>Chi ti·∫øt c√¢u tr·∫£ l·ªùi:</h3>
            {currentQuestions.map((question, index) => (
              <div key={question.id || index} className="answer-item">
                <p className="question-text">
                  <strong>C√¢u {index + 1}:</strong> {question.question}
                </p>
                <div className="answer-options">
                  {question.options.map((option, optionIndex) => (
                    <div 
                      key={optionIndex} 
                      className={`option ${
                        optionIndex === question.correctAnswer ? 'correct' : ''
                      } ${
                        optionIndex === selectedAnswers[index] && optionIndex !== question.correctAnswer ? 'incorrect' : ''
                      }`}
                    >
                      {optionIndex === question.correctAnswer && '‚úì '}
                      {optionIndex === selectedAnswers[index] && optionIndex !== question.correctAnswer && '‚úó '}
                      {option}
                    </div>
                  ))}
                </div>
                {question.explanation && (
                  <p className="explanation">üí° {question.explanation}</p>
                )}
              </div>
            ))}
          </div>
          
          <button className="retry-button" onClick={resetQuiz}>
            L√†m L·∫°i
          </button>
        </div>
      </div>
    );
  }

  // M√†n h√¨nh l√†m b√†i
  const question = currentQuestions[currentQuestion];
  
  if (!question) {
    if (aiError) {
      return (
        <div className="quiz-container">
          <div className="quiz-card quiz-error">
            <h2>L·ªói AI Quiz</h2>
            <p>{aiError}</p>
            <button className="retry-button" onClick={() => { setAIError(null); setIsStarted(false); }}>Th·ª≠ l·∫°i</button>
          </div>
        </div>
      );
    }
    return (
      <div className="quiz-container">
        <div className="quiz-card loading-animation">
          <div className="spinner"></div>
          <p>ƒêang t·∫£i c√¢u h·ªèi...</p>
        </div>
      </div>
    );
  }
  
  return (
    <div className="quiz-container">
      <div className="quiz-card">
        <div className="quiz-header">
          <div className="quiz-progress">
            <span>C√¢u {currentQuestion + 1}/{currentQuestions.length}</span>
            <div className="progress-bar">
              <div 
                className="progress-fill"
                style={{ width: `${((currentQuestion + 1) / currentQuestions.length) * 100}%` }}
              />
            </div>
          </div>
          <div className="quiz-timers">
            <div className="question-timer">
              <span>‚è≥ {timeLeft}s</span>
            </div>
            <div className="total-timer">
              <span>‚è±Ô∏è {formatTime(totalTimeLeft)}</span>
            </div>
          </div>
        </div>

        <div className="question-container">
          <h2 className="question-text">{question.question}</h2>
          <div className="options-container">
            {question.options.map((option, index) => (
              <button
                key={index}
                className={`option-button ${selectedAnswers[currentQuestion] === index ? 'selected' : ''}`}
                onClick={() => handleAnswerSelect(index)}
              >
                <span className="option-letter">{String.fromCharCode(65 + index)}</span>
                <span className="option-text">{option}</span>
              </button>
            ))}
          </div>

          <div className="question-actions">
            <button 
              className="next-button"
              onClick={handleNextQuestion}
              disabled={selectedAnswers[currentQuestion] === undefined}
            >
              {currentQuestion === currentQuestions.length - 1 ? 'Ho√†n Th√†nh' : 'C√¢u Ti·∫øp Theo'}
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Quiz;
