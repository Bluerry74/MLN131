import { useState, useEffect } from 'react';
import { collection, addDoc } from 'firebase/firestore';
import { db } from '../firebase';
import { quizQuestions } from '../data/quizQuestions';
import type { QuizResult } from '../types';
import './Quiz.css';

const QUESTION_TIME_LIMIT = 20; // gi√¢y
const TOTAL_QUIZ_TIME = 300; // 5 ph√∫t = 300 gi√¢y

const Quiz: React.FC = () => {
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [selectedAnswers, setSelectedAnswers] = useState<number[]>([]);
  const [timeLeft, setTimeLeft] = useState(QUESTION_TIME_LIMIT);
  const [totalTimeLeft, setTotalTimeLeft] = useState(TOTAL_QUIZ_TIME);
  const [isQuizFinished, setIsQuizFinished] = useState(false);
  const [score, setScore] = useState(0);
  const [username, setUsername] = useState('');
  const [isStarted, setIsStarted] = useState(false);
  const [startTime, setStartTime] = useState(0);
  const [showResult, setShowResult] = useState(false);

  // Timer cho c√¢u h·ªèi hi·ªán t·∫°i
  useEffect(() => {
    if (!isStarted || isQuizFinished) return;

    const timer = setInterval(() => {
      setTimeLeft((prev) => {
        if (prev <= 1) {
          handleNextQuestion();
          return QUESTION_TIME_LIMIT;
        }
        return prev - 1;
      });
    }, 1000);

    return () => clearInterval(timer);
  }, [currentQuestion, isStarted, isQuizFinished]);

  // Timer cho t·ªïng th·ªùi gian l√†m b√†i
  useEffect(() => {
    if (!isStarted || isQuizFinished) return;

    const timer = setInterval(() => {
      setTotalTimeLeft((prev) => {
        if (prev <= 1) {
          finishQuiz();
          return 0;
        }
        return prev - 1;
      });
    }, 1000);

    return () => clearInterval(timer);
  }, [isStarted, isQuizFinished]);

  const startQuiz = () => {
    if (username.trim() === '') {
      alert('Vui l√≤ng nh·∫≠p t√™n c·ªßa b·∫°n ƒë·ªÉ b·∫Øt ƒë·∫ßu!');
      return;
    }
    setIsStarted(true);
    setStartTime(Date.now());
  };

  const handleAnswerSelect = (answerIndex: number) => {
    const newAnswers = [...selectedAnswers];
    newAnswers[currentQuestion] = answerIndex;
    setSelectedAnswers(newAnswers);
  };

  const handleNextQuestion = () => {
    if (currentQuestion < quizQuestions.length - 1) {
      setCurrentQuestion(prev => prev + 1);
      setTimeLeft(QUESTION_TIME_LIMIT);
    } else {
      finishQuiz();
    }
  };

  const finishQuiz = async () => {
    setIsQuizFinished(true);
    
    // T√≠nh ƒëi·ªÉm
    let correctAnswers = 0;
    selectedAnswers.forEach((answer, index) => {
      if (answer === quizQuestions[index].correctAnswer) {
        correctAnswers++;
      }
    });
    
    const finalScore = correctAnswers;
    setScore(finalScore);
    
    // T√≠nh th·ªùi gian th·ª±c t·∫ø l√†m b√†i
    const actualTimeTaken = Math.round((Date.now() - startTime) / 1000);
    
    // L∆∞u k·∫øt qu·∫£ v√†o Firestore
    try {
      const quizResult: Omit<QuizResult, 'id'> = {
        username: username.trim(),
        score: finalScore,
        totalQuestions: quizQuestions.length,
        timeTaken: actualTimeTaken,
        quizDuration: TOTAL_QUIZ_TIME,
        timestamp: new Date()
      };
      
      await addDoc(collection(db, 'quizResults'), quizResult);
      setShowResult(true);
    } catch (error) {
      console.error('L·ªói khi l∆∞u k·∫øt qu·∫£:', error);
      alert('C√≥ l·ªói x·∫£y ra khi l∆∞u k·∫øt qu·∫£. Vui l√≤ng th·ª≠ l·∫°i sau.');
      setShowResult(true);
    }
  };

  const resetQuiz = () => {
    setCurrentQuestion(0);
    setSelectedAnswers([]);
    setTimeLeft(QUESTION_TIME_LIMIT);
    setTotalTimeLeft(TOTAL_QUIZ_TIME);
    setIsQuizFinished(false);
    setIsStarted(false);
    setScore(0);
    setUsername('');
    setShowResult(false);
    setStartTime(0);
  };

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  // M√†n h√¨nh b·∫Øt ƒë·∫ßu
  if (!isStarted) {
    return (
      <div className="quiz-container">
        <div className="quiz-start">
          <h1>Ki·ªÉm Tra Ki·∫øn Th·ª©c</h1>
          <p className="quiz-description">
            B√†i ki·ªÉm tra g·ªìm {quizQuestions.length} c√¢u h·ªèi tr·∫Øc nghi·ªám v·ªÅ t∆∞ t∆∞·ªüng H·ªì Ch√≠ Minh.
          </p>
          <div className="quiz-rules">
            <h3>Quy ƒë·ªãnh:</h3>
            <ul>
              <li>Th·ªùi gian l√†m b√†i: {TOTAL_QUIZ_TIME / 60} ph√∫t</li>
              <li>M·ªói c√¢u h·ªèi c√≥ th·ªùi gian: {QUESTION_TIME_LIMIT} gi√¢y</li>
              <li>T·ª± ƒë·ªông chuy·ªÉn c√¢u khi h·∫øt th·ªùi gian</li>
              <li>Kh√¥ng th·ªÉ quay l·∫°i c√¢u tr∆∞·ªõc</li>
            </ul>
          </div>
          <div className="username-input">
            <input
              type="text"
              placeholder="Nh·∫≠p t√™n c·ªßa b·∫°n"
              value={username}
              onChange={(e) => setUsername(e.target.value)}
              maxLength={50}
            />
          </div>
          <button 
            className="start-button" 
            onClick={startQuiz}
            disabled={username.trim() === ''}
          >
            B·∫Øt ƒê·∫ßu Ki·ªÉm Tra
          </button>
        </div>
      </div>
    );
  }

  // M√†n h√¨nh k·∫øt qu·∫£
  if (isQuizFinished && showResult) {
    const percentage = Math.round((score / quizQuestions.length) * 100);
    
    return (
      <div className="quiz-container">
        <div className="quiz-result">
          <h1>K·∫øt Qu·∫£ Ki·ªÉm Tra</h1>
          <div className="result-summary">
            <h2>Ch√∫c m·ª´ng {username}!</h2>
            <div className="score-display">
              <span className="score-number">{score}/{quizQuestions.length}</span>
              <span className="score-percentage">({percentage}%)</span>
            </div>
            <p className="result-message">
              {percentage >= 80 ? 'Xu·∫•t s·∫Øc! B·∫°n ƒë√£ n·∫Øm v·ªØng ki·∫øn th·ª©c!' :
               percentage >= 60 ? 'T·ªët! B·∫°n ƒë√£ hi·ªÉu kh√° t·ªët b√†i h·ªçc.' :
               percentage >= 40 ? 'Kh√°! B·∫°n c·∫ßn √¥n t·∫≠p th√™m m·ªôt ch√∫t.' :
               'H√£y √¥n t·∫≠p l·∫°i b√†i h·ªçc v√† th·ª≠ l·∫ßn n·ªØa nh√©!'}
            </p>
          </div>
          
          <div className="answer-review">
            <h3>Chi ti·∫øt c√¢u tr·∫£ l·ªùi:</h3>
            {quizQuestions.map((question, index) => (
              <div key={question.id} className="answer-item">
                <p className="question-text">
                  <strong>C√¢u {index + 1}:</strong> {question.question}
                </p>
                <div className="answer-options">
                  {question.options.map((option, optionIndex) => (
                    <div 
                      key={optionIndex} 
                      className={`option ${
                        optionIndex === question.correctAnswer ? 'correct' :
                        optionIndex === selectedAnswers[index] && optionIndex !== question.correctAnswer ? 'incorrect' :
                        ''
                      }`}
                    >
                      {option}
                      {optionIndex === question.correctAnswer && ' ‚úì'}
                      {optionIndex === selectedAnswers[index] && optionIndex !== question.correctAnswer && ' ‚úó'}
                    </div>
                  ))}
                </div>
                {question.explanation && (
                  <p className="explanation">üí° {question.explanation}</p>
                )}
              </div>
            ))}
          </div>
          
          <button className="retry-button" onClick={resetQuiz}>
            L√†m L·∫°i B√†i Ki·ªÉm Tra
          </button>
        </div>
      </div>
    );
  }

  // M√†n h√¨nh l√†m b√†i
  const question = quizQuestions[currentQuestion];
  
  return (
    <div className="quiz-container">
      <div className="quiz-header">
        <div className="quiz-progress">
          <span>C√¢u {currentQuestion + 1}/{quizQuestions.length}</span>
          <div className="progress-bar">
            <div 
              className="progress-fill"
              style={{ width: `${((currentQuestion + 1) / quizQuestions.length) * 100}%` }}
            />
          </div>
        </div>
        <div className="quiz-timers">
          <div className="question-timer">
            <span>C√¢u h·ªèi: {timeLeft}s</span>
          </div>
          <div className="total-timer">
            <span>T·ªïng: {formatTime(totalTimeLeft)}</span>
          </div>
        </div>
      </div>

      <div className="question-container">
        <h2 className="question-text">{question.question}</h2>
        <div className="options-container">
          {question.options.map((option, index) => (
            <button
              key={index}
              className={`option-button ${selectedAnswers[currentQuestion] === index ? 'selected' : ''}`}
              onClick={() => handleAnswerSelect(index)}
            >
              <span className="option-letter">{String.fromCharCode(65 + index)}</span>
              <span className="option-text">{option}</span>
            </button>
          ))}
        </div>

        <div className="question-actions">
          <button 
            className="next-button"
            onClick={handleNextQuestion}
            disabled={selectedAnswers[currentQuestion] === undefined}
          >
            {currentQuestion === quizQuestions.length - 1 ? 'Ho√†n Th√†nh' : 'C√¢u Ti·∫øp Theo'}
          </button>
        </div>
      </div>
    </div>
  );
};

export default Quiz;
